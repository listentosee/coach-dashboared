'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { supabase } from '@/lib/supabase/client';
import { Plus, Minus, Users, X, UserPlus, ChevronDown, ChevronRight, Upload, Image as ImageIcon } from 'lucide-react';
import {
  DndContext,
  DragEndEvent,
  DragOverEvent,
  DragOverlay,
  DragStartEvent,
  PointerSensor,
  useSensor,
  useSensors,
  useDroppable,
} from '@dnd-kit/core';
import {
  SortableContext,
  verticalListSortingStrategy,
} from '@dnd-kit/sortable';
import { useSortable } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';

interface Competitor {
  id: string;
  first_name: string;
  last_name: string;
  grade?: string;
  status: string;
  is_active: boolean;
  team_id?: string;
}

interface Team {
  id: string;
  name: string;
  division?: string;
  status: 'forming' | 'active' | 'archived';
  member_count: number;
  image_url?: string;
}

interface TeamMember {
  id: string;
  competitor_id: string;
  competitor: {
    first_name: string;
    last_name: string;
    grade?: string;
  };
}

// Draggable Competitor Item
function DraggableCompetitor({ competitor }: { competitor: Competitor }) {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({ id: competitor.id });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : 1,
  };

  return (
    <div
      ref={setNodeRef}
      style={style}
      {...attributes}
      {...listeners}
      className="p-3 border border-meta-border rounded-lg bg-meta-card cursor-move hover:border-meta-accent transition-colors"
    >
      <div>
        <p className="font-medium text-meta-light">
          {competitor.first_name} {competitor.last_name}
        </p>
        {competitor.grade && (
          <p className="text-sm text-meta-muted">Grade {competitor.grade}</p>
        )}
      </div>
    </div>
  );
}

// Team Card Component with Inline Expansion
function TeamCard({ 
  team, 
  teamMembers, 
  onDeleteTeam, 
  onRemoveMember,
  onImageUpload 
}: { 
  team: Team; 
  teamMembers: TeamMember[];
  onDeleteTeam: (teamId: string) => void;
  onRemoveMember: (teamId: string, competitorId: string) => void;
  onImageUpload: (teamId: string, file: File) => void;
}) {
  const { setNodeRef, isOver } = useDroppable({
    id: team.id,
  });
  const [expanded, setExpanded] = useState(false);
  const [imageUploading, setImageUploading] = useState(false);

  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setImageUploading(true);
      await onImageUpload(team.id, file);
      setImageUploading(false);
    }
  };

  return (
    <Card 
      ref={setNodeRef}
      className={`bg-meta-card border transition-colors ${
        isOver 
          ? 'border-meta-accent bg-meta-accent/20 border-2' 
          : 'border-meta-border hover:border-meta-accent'
      }`}
    >
      <CardContent className="p-4">
        {/* Team Header */}
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center space-x-3">
            <button
              onClick={() => setExpanded(!expanded)}
              className="text-meta-accent hover:text-meta-light transition-colors"
            >
              {expanded ? <ChevronDown className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
            </button>
            
            {/* Team Image */}
            <div className="relative w-12 h-12 rounded-lg overflow-hidden bg-meta-dark border border-meta-border">
              {team.image_url ? (
                <img 
                  src={team.image_url} 
                  alt={`${team.name} team`}
                  className="w-full h-full object-cover"
                />
              ) : (
                <div className="w-full h-full flex items-center justify-center">
                  <ImageIcon className="h-6 w-6 text-meta-muted" />
                </div>
              )}
              
              {/* Upload Overlay */}
              <label className="absolute inset-0 bg-black bg-opacity-50 opacity-0 hover:opacity-100 transition-opacity cursor-pointer flex items-center justify-center">
                <Upload className="h-4 w-4 text-white" />
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleImageUpload}
                  className="hidden"
                  disabled={imageUploading}
                />
              </label>
            </div>
            
            <div>
              <h3 className="font-medium text-meta-light">{team.name}</h3>
              <Badge className="bg-meta-accent text-white text-xs">
                {team.member_count}/6
              </Badge>
            </div>
          </div>
          
          <Button
            size="sm"
            variant="outline"
            onClick={() => onDeleteTeam(team.id)}
            disabled={team.member_count > 0}
            className={`text-red-600 border-red-300 hover:bg-red-50 h-6 w-6 p-0 ${
              team.member_count > 0 ? 'opacity-50 cursor-not-allowed' : ''
            }`}
            title={team.member_count > 0 ? 'Remove all members first' : 'Delete team'}
          >
            <X className="h-3 w-3" />
          </Button>
        </div>

                 {/* Expanded Content */}
         {expanded && (
           <div className="space-y-4">
             {/* Team Members */}
             <div>
               <h4 className="text-sm font-medium text-meta-light mb-2">Team Members</h4>
               <div className="space-y-1">
                 {teamMembers.length === 0 ? (
                   <p className="text-sm text-meta-muted italic">No members yet</p>
                 ) : (
                   teamMembers.map((member) => (
                     <div key={member.id} className="flex items-center justify-between p-2 bg-meta-dark rounded text-sm">
                       <span className="text-meta-light">
                         {member.competitor.first_name} {member.competitor.last_name}
                       </span>
                       <Button
                         size="sm"
                         variant="outline"
                         onClick={() => onRemoveMember(team.id, member.competitor_id)}
                         className="text-red-600 border-red-300 hover:bg-red-50 h-5 w-5 p-0"
                       >
                         <Minus className="h-3 w-3" />
                       </Button>
                     </div>
                   ))
                 )}
               </div>
             </div>
           </div>
         )}
      </CardContent>
    </Card>
  );
}

export const dynamic = 'force-dynamic';

export default function TeamsPage() {
  const [availableCompetitors, setAvailableCompetitors] = useState<Competitor[]>([]);
  const [teams, setTeams] = useState<Team[]>([]);
  const [teamMembers, setTeamMembers] = useState<Record<string, TeamMember[]>>({});
  const [newTeamName, setNewTeamName] = useState('');
  const [isCreatingTeam, setIsCreatingTeam] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [activeId, setActiveId] = useState<string | null>(null);

  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8,
      },
    })
  );

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      // Fetch all competitors through API route (enables admin access)
      const competitorsResponse = await fetch('/api/competitors');
      if (!competitorsResponse.ok) {
        throw new Error('Failed to fetch competitors');
      }
      const competitorsData = await competitorsResponse.json();

      // Fetch teams through API route (enables admin access)
      const teamsResponse = await fetch('/api/teams');
      if (!teamsResponse.ok) {
        throw new Error('Failed to fetch teams');
      }
      const teamsData = await teamsResponse.json();

      // Fetch team members for all teams
      const membersData: Record<string, TeamMember[]> = {};
      for (const team of teamsData.teams || []) {
        const { data: members, error: membersError } = await supabase
          .from('team_members')
          .select(`
            id,
            competitor_id,
            competitor:competitors(
              first_name,
              last_name,
              grade
            )
          `)
          .eq('team_id', team.id);

        if (!membersError) {
          membersData[team.id] = (members || []).map(member => ({
            ...member,
            competitor: Array.isArray(member.competitor) ? member.competitor[0] : member.competitor
          }));
        }
      }

      // Filter available competitors: status != "pending" AND is_active = true AND team_id IS NULL
      const available = (competitorsData.competitors || []).filter(c => 
        c.status !== 'pending' && c.is_active && !c.team_id
      );

      const teamsWithCounts = (teamsData.teams || []).map(team => ({
        ...team,
        member_count: (membersData[team.id] || []).length
      }));

      setAvailableCompetitors(available);
      setTeams(teamsWithCounts);
      setTeamMembers(membersData);
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const createTeam = async () => {
    if (!newTeamName.trim()) return;

    setIsCreatingTeam(true);
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      // Optimistic update
      const tempTeam: Team = {
        id: `temp-${Date.now()}`,
        name: newTeamName.trim(),
        status: 'forming',
        member_count: 0
      };

      setTeams(prev => [tempTeam, ...prev]);
      setTeamMembers(prev => ({ ...prev, [tempTeam.id]: [] }));
      setNewTeamName('');

      // API call
      const response = await fetch('/api/teams/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: tempTeam.name,
        }),
      });

      if (response.ok) {
        const { team: newTeam } = await response.json();
        setTeams(prev => prev.map(t => 
          t.id === tempTeam.id ? { ...newTeam, member_count: 0 } : t
        ));
        setTeamMembers(prev => {
          const newMembers = { ...prev };
          newMembers[newTeam.id] = [];
          delete newMembers[tempTeam.id];
          return newMembers;
        });
      } else {
        const errorData = await response.json();
        alert('Failed to create team: ' + errorData.error);
        
        setTeams(prev => prev.filter(t => t.id !== tempTeam.id));
        setTeamMembers(prev => {
          const newMembers = { ...prev };
          delete newMembers[tempTeam.id];
          return newMembers;
        });
        setNewTeamName(tempTeam.name);
      }
    } catch (error) {
      console.error('Error creating team:', error);
      alert('Failed to create team');
      
      setTeams(prev => prev.filter(t => t.id.startsWith('temp-')));
      setTeamMembers(prev => {
        const newMembers = { ...prev };
        Object.keys(newMembers).forEach(key => {
          if (key.startsWith('temp-')) delete newMembers[key];
        });
        return newMembers;
      });
      setNewTeamName(newTeamName);
    } finally {
      setIsCreatingTeam(false);
    }
  };

  const addMemberToTeam = async (teamId: string, competitorId: string) => {
    try {
      const competitor = availableCompetitors.find(c => c.id === competitorId);
      if (!competitor) return;

      // Optimistic update
      const newMember: TeamMember = {
        id: `temp-${Date.now()}`,
        competitor_id: competitorId,
        competitor: competitor
      };

      setAvailableCompetitors(prev => prev.filter(c => c.id !== competitorId));
      setTeamMembers(prev => ({
        ...prev,
        [teamId]: [...(prev[teamId] || []), newMember]
      }));
      setTeams(prev => prev.map(team => 
        team.id === teamId 
          ? { ...team, member_count: team.member_count + 1 }
          : team
      ));

      // API call
      const response = await fetch(`/api/teams/${teamId}/members/add`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          competitor_id: competitorId,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        alert('Failed to add member: ' + errorData.error);
        
        setAvailableCompetitors(prev => [...prev, competitor]);
        setTeamMembers(prev => ({
          ...prev,
          [teamId]: (prev[teamId] || []).filter(m => m.id !== newMember.id)
        }));
        setTeams(prev => prev.map(team => 
          team.id === teamId 
            ? { ...team, member_count: team.member_count - 1 }
            : team
        ));
      }
    } catch (error) {
      console.error('Error adding member:', error);
      alert('Failed to add member');
      
      const competitor = availableCompetitors.find(c => c.id === competitorId);
      if (competitor) {
        setAvailableCompetitors(prev => [...prev, competitor]);
        setTeamMembers(prev => ({
          ...prev,
          [teamId]: (prev[teamId] || []).filter(m => m.competitor_id !== competitorId)
        }));
        setTeams(prev => prev.map(team => 
          team.id === teamId 
            ? { ...team, member_count: team.member_count - 1 }
            : team
        ));
      }
    }
  };

  const removeMemberFromTeam = async (teamId: string, competitorId: string) => {
    try {
      const member = teamMembers[teamId]?.find(m => m.competitor_id === competitorId);
      const competitor = member?.competitor;
      
      if (!member || !competitor) return;

      // Optimistic update
      setTeamMembers(prev => ({
        ...prev,
        [teamId]: (prev[teamId] || []).filter(m => m.competitor_id !== competitorId)
      }));
      setTeams(prev => prev.map(team => 
        team.id === teamId 
          ? { ...team, member_count: team.member_count - 1 }
          : team
      ));
      setAvailableCompetitors(prev => [...prev, {
        id: competitorId,
        first_name: competitor.first_name,
        last_name: competitor.last_name,
        grade: competitor.grade,
        status: 'profile', // Default status for available competitors
        is_active: true
      }]);

      // API call
      const response = await fetch(`/api/teams/${teamId}/members/${competitorId}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        alert('Failed to remove member');
        
        setTeamMembers(prev => ({
          ...prev,
          [teamId]: [...(prev[teamId] || []), member]
        }));
        setTeams(prev => prev.map(team => 
          team.id === teamId 
            ? { ...team, member_count: team.member_count + 1 }
            : team
        ));
        setAvailableCompetitors(prev => prev.filter(c => c.id !== competitorId));
      }
    } catch (error) {
      console.error('Error removing member:', error);
      alert('Failed to remove member');
      
      const member = teamMembers[teamId]?.find(m => m.competitor_id === competitorId);
      const competitor = member?.competitor;
      
      if (member && competitor) {
        setTeamMembers(prev => ({
          ...prev,
          [teamId]: [...(prev[teamId] || []), member]
        }));
        setTeams(prev => prev.map(team => 
          team.id === teamId 
            ? { ...team, member_count: team.member_count + 1 }
            : team
        ));
        setAvailableCompetitors(prev => prev.filter(c => c.id !== competitorId));
      }
    }
  };

  const deleteTeam = async (teamId: string) => {
    if (!confirm('Are you sure you want to delete this team?')) {
      return;
    }

    try {
      const response = await fetch(`/api/teams/${teamId}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        fetchData();
      } else {
        alert('Failed to delete team');
      }
    } catch (error) {
      console.error('Error deleting team:', error);
      alert('Failed to delete team');
    }
  };

  const handleDragStart = (event: DragStartEvent) => {
    setActiveId(event.active.id as string);
  };

  const handleDragOver = (event: DragOverEvent) => {
    const { active, over } = event;
    
    if (!over) return;

    const activeId = active.id as string;
    const overId = over.id as string;

    // Check if we're dragging a competitor over a team
    const isCompetitor = availableCompetitors.some(c => c.id === activeId);
    const isTeam = teams.some(t => t.id === overId);

    if (isCompetitor && isTeam) {
      // Visual feedback is handled by the useDroppable hook
    }
  };

  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;
    
    if (!over) {
      setActiveId(null);
      return;
    }

    const activeId = active.id as string;
    const overId = over.id as string;

    // Check if we're dropping a competitor onto a team
    const competitor = availableCompetitors.find(c => c.id === activeId);
    const team = teams.find(t => t.id === overId);

    if (competitor && team) {
      addMemberToTeam(overId, activeId);
    }

    setActiveId(null);
  };

  const uploadTeamImage = async (teamId: string, file: File) => {
    try {
      const fileExt = file.name.split('.').pop();
      const fileName = `${teamId}-${Date.now()}.${fileExt}`;
      const filePath = `team-images/${fileName}`;

      // Upload to Supabase Storage
      const { error: uploadError } = await supabase.storage
        .from('team-images')
        .upload(filePath, file);

      if (uploadError) {
        throw uploadError;
      }

      // Get public URL
      const { data: { publicUrl } } = supabase.storage
        .from('team-images')
        .getPublicUrl(filePath);

      // Update team with image URL
      const response = await fetch(`/api/teams/${teamId}/update`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          image_url: publicUrl
        }),
      });

      if (response.ok) {
        setTeams(prev => prev.map(team => 
          team.id === teamId 
            ? { ...team, image_url: publicUrl }
            : team
        ));
      } else {
        alert('Failed to update team image');
      }
    } catch (error) {
      console.error('Error uploading image:', error);
      alert('Failed to upload image');
    }
  };

  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/4 mb-4"></div>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="h-96 bg-gray-200 rounded"></div>
            <div className="h-96 bg-gray-200 rounded"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <DndContext
      sensors={sensors}
      onDragStart={handleDragStart}
      onDragOver={handleDragOver}
      onDragEnd={handleDragEnd}
    >
      <div className="space-y-6">
        <div>
          <h1 className="text-3xl font-bold text-meta-light">Teams</h1>
          <p className="text-meta-muted mt-2">
            Manage teams and assign competitors
          </p>
        </div>

        {/* Two Column Layout */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                 {/* Available Competitors */}
         <Card className="bg-meta-card border-meta-border">
           <CardHeader>
             <CardTitle className="text-meta-light text-lg">Available Competitors</CardTitle>
             <CardDescription className="text-meta-muted">
               Drag to teams ({availableCompetitors.length})
             </CardDescription>
           </CardHeader>
           <CardContent>
             <SortableContext
               items={availableCompetitors.map(c => c.id)}
               strategy={verticalListSortingStrategy}
             >
               <div className="space-y-2 max-h-96 overflow-y-auto">
                 {availableCompetitors.length === 0 ? (
                   <div className="text-center py-8 text-meta-muted">
                     <Users className="mx-auto h-8 w-8 mb-2" />
                     <p>All competitors are assigned to teams</p>
                   </div>
                 ) : (
                   availableCompetitors.map((competitor) => (
                     <DraggableCompetitor key={competitor.id} competitor={competitor} />
                   ))
                 )}
               </div>
             </SortableContext>
           </CardContent>
         </Card>

                 {/* Teams */}
         <Card className="bg-meta-card border-meta-border lg:col-span-2">
          <CardHeader>
            <CardTitle className="text-meta-light text-lg">Teams</CardTitle>
            <CardDescription className="text-meta-muted">
              Current teams ({teams.length})
            </CardDescription>
          </CardHeader>
          <CardContent>
            {/* Create New Team */}
            <div className="mb-4 p-3 border border-meta-border rounded-lg">
              <div className="flex items-center space-x-2">
                <Input
                  placeholder="Enter team name"
                  value={newTeamName}
                  onChange={(e) => setNewTeamName(e.target.value)}
                  className="flex-1 bg-meta-dark border-meta-border text-meta-light"
                  onKeyPress={(e) => e.key === 'Enter' && createTeam()}
                />
                <Button
                  onClick={createTeam}
                  disabled={!newTeamName.trim() || isCreatingTeam}
                  size="sm"
                  className="bg-meta-accent hover:bg-blue-600"
                >
                  {isCreatingTeam ? 'Creating...' : <Plus className="h-4 w-4" />}
                </Button>
              </div>
            </div>

            {/* Teams List */}
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {teams.length === 0 ? (
                <div className="text-center py-8 text-meta-muted">
                  <Users className="mx-auto h-8 w-8 mb-2" />
                  <p>No teams created yet</p>
                  <p className="text-xs">Create your first team above</p>
                </div>
              ) : (
                                 teams.map((team) => (
                   <TeamCard
                     key={team.id}
                     team={team}
                     teamMembers={teamMembers[team.id] || []}
                     onDeleteTeam={deleteTeam}
                     onRemoveMember={removeMemberFromTeam}
                     onImageUpload={uploadTeamImage}
                   />
                 ))
              )}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Drag Overlay */}
      <DragOverlay>
        {activeId ? (
          <div className="p-3 border border-meta-accent rounded-lg bg-meta-card shadow-lg">
            <p className="text-meta-light font-medium">
              {availableCompetitors.find(c => c.id === activeId)?.first_name} {availableCompetitors.find(c => c.id === activeId)?.last_name}
            </p>
          </div>
        ) : null}
      </DragOverlay>
    </DndContext>
  );
}
