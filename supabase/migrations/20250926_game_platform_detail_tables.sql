-- Create detailed challenge solve table
create table if not exists public.game_platform_challenge_solves (
  id bigint generated by default as identity primary key,
  syned_user_id text not null,
  metactf_user_id bigint,
  syned_team_id text,
  challenge_solve_id bigint not null,
  challenge_id bigint,
  challenge_title text,
  challenge_category text,
  challenge_points integer,
  solved_at timestamptz,
  source text check (source in ('odl','flash_ctf')) not null default 'odl',
  raw_payload jsonb,
  created_at timestamptz not null default now(),
  unique (syned_user_id, challenge_solve_id)
);

create index if not exists idx_game_platform_challenge_solves_user
  on public.game_platform_challenge_solves (syned_user_id, solved_at desc);

create index if not exists idx_game_platform_challenge_solves_category
  on public.game_platform_challenge_solves (challenge_category);

-- Create flash CTF events table
create table if not exists public.game_platform_flash_ctf_events (
  id bigint generated by default as identity primary key,
  syned_user_id text not null,
  metactf_user_id bigint,
  event_id text not null,
  flash_ctf_name text,
  challenges_solved integer default 0,
  points_earned integer default 0,
  rank integer,
  started_at timestamptz,
  ended_at timestamptz,
  raw_payload jsonb,
  created_at timestamptz not null default now(),
  unique (syned_user_id, event_id)
);

create index if not exists idx_game_platform_flash_ctf_events_user
  on public.game_platform_flash_ctf_events (syned_user_id, started_at desc);

-- Track per-user sync state for resumable jobs
create table if not exists public.game_platform_sync_state (
  syned_user_id text primary key,
  last_odl_synced_at timestamptz,
  last_flash_ctf_synced_at timestamptz,
  last_remote_accessed_at timestamptz,
  last_attempt_at timestamptz,
  last_result text check (last_result in ('success','failure')),
  error_message text,
  updated_at timestamptz not null default now()
);

create or replace function public.update_game_platform_sync_state_timestamp()
returns trigger
language plpgsql
as $$
begin
  new.updated_at := now();
  return new;
end;
$$;

create trigger trg_game_platform_sync_state_updated
before update on public.game_platform_sync_state
for each row
execute function public.update_game_platform_sync_state_timestamp();

-- RLS placeholder: keep tables open for now (matching existing stats table policy)
alter table public.game_platform_challenge_solves enable row level security;
alter table public.game_platform_flash_ctf_events enable row level security;
alter table public.game_platform_sync_state enable row level security;

create policy "allow_all_access_for_now" on public.game_platform_challenge_solves for all using (true) with check (true);
create policy "allow_all_access_for_now" on public.game_platform_flash_ctf_events for all using (true) with check (true);
create policy "allow_all_access_for_now" on public.game_platform_sync_state for all using (true) with check (true);
